/*!
********************************************************************************
*       @brief      This module provides functions to handle the use of the lcd.
*                   Documented by Josh Masters Dec. 2014
*       @file       Uphole/src/HardwareInterfaces/lcd.c
*       @author     Bill Kamienik
*       @date       December 2014
*       @copyright  COPYRIGHT (c) 2014 Target Drilling Inc. All rights are
*                   reserved.  Reproduction in whole or in part is prohibited
*                   without the prior written consent of the copyright holder.
*******************************************************************************/

//============================================================================//
//      INCLUDES                                                              //
//============================================================================//

#include <intrinsics.h>
#include <stm32f4xx.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "portable.h"
#include "InterruptEnabling.h"
#include "lcd.h"
#include "Manager_DataLink.h"
#include "systick.h"
#include "timer.h"
#include "wdt.h"
#include "SecureParameters.h"

//============================================================================//
//      CONSTANTS                                                             //
//============================================================================//

#define LCD_RESET_PORT      GPIOE
#define LCD_RESET_PIN       GPIO_Pin_11

#define LCD_BACKLIGHT_PORT  GPIOB
#define LCD_BACKLIGHT_PIN   GPIO_Pin_5

#define LCD_DATA_BUS_PINS_PORT_D   (GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_0 | GPIO_Pin_1)
#define LCD_DATA_BUS_PINS_PORT_E   (GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10)

//#define LCD_REG      (*((volatile U_BYTE *) 0x60000000))
//#define LCD_RAM      (*((volatile U_BYTE *) 0x60020000))

//============================================================================//
//      FUNCTION PROTOTYPES                                                   //
//============================================================================//

static void lcd_WritePixelDataBuffer(void);
static void lcd_WritePixelBackgroundBuffer(void);
static void lcd_Write(U_BYTE nCmd, U_BYTE *pData, U_INT32 nLength);

//============================================================================//
//      DATA DEFINITIONS                                                      //
//============================================================================//

#pragma diag_suppress=Pe550
#pragma section="LCD_DATA_PORT"
__no_init static U_BYTE m_nLcdDataPort @ "LCD_DATA_PORT";

#pragma section="LCD_COMMAND_PORT"
__no_init static U_BYTE m_nLcdCommandPort @ "LCD_COMMAND_PORT";

U_BYTE m_nPixelData[MAX_PIXEL_ROW][MAX_PIXEL_COL_STORAGE];
U_BYTE m_nPixelBackground[MAX_PIXEL_ROW][MAX_PIXEL_COL_STORAGE];

// variable to keep track of the elapsed time for LCD backlight (LED) dimming
static TIME_LR m_tLcdBacklightTimer;

static BOOL m_bPaintLcdBackground;
static BOOL m_bPaintLcdForeground;

//============================================================================//
//      FUNCTION IMPLEMENTATIONS                                              //
//============================================================================//

/*!
********************************************************************************
*       @details
*******************************************************************************/
/*
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Function:
;   LCD_InitPins()
;
; Description:
;   Sets up LCD driver pin as an output and turns off the LED
;
; Reentrancy:
;   No
;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
void LCD_InitPins(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    static FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;

    GPIO_StructInit(&GPIO_InitStructure);

    // GPIO LED status Pins
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

    GPIO_InitStructure.GPIO_Pin = LCD_RESET_PIN;
    GPIO_Init(LCD_RESET_PORT, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = LCD_BACKLIGHT_PIN;
    GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;      //This is the Enable Pin
    GPIO_Init(GPIOD, &GPIO_InitStructure);

    GPIO_StructInit(&GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

    GPIO_InitStructure.GPIO_Pin = LCD_DATA_BUS_PINS_PORT_D;
    GPIO_Init(GPIOD, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = LCD_DATA_BUS_PINS_PORT_E;
    GPIO_Init(GPIOE, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = (GPIO_Pin_11 | GPIO_Pin_5 | GPIO_Pin_7);
    GPIO_Init(GPIOD, &GPIO_InitStructure);

    GPIO_PinAFConfig(GPIOD, (GPIO_PinSource14), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD, (GPIO_PinSource15), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD, (GPIO_PinSource0), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD, (GPIO_PinSource1), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE, (GPIO_PinSource7), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE, (GPIO_PinSource8), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE, (GPIO_PinSource9), GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE, (GPIO_PinSource10), GPIO_AF_FSMC);

    GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC); //A16
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);  //W/~R
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FSMC);  //~CS

    FSMC_NORSRAMStructInit(&FSMC_NORSRAMInitStructure);

    FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
    FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Enable;

    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 4;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 4;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 4;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 4;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 4;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 16;

    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 4;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 4;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 4;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_CLKDivision = 4;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_DataLatency = 4;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct->FSMC_DataSetupTime = 16;

    FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);

    GPIO_SetBits(LCD_BACKLIGHT_PORT, LCD_BACKLIGHT_PIN);

    GPIO_ResetBits(LCD_RESET_PORT, LCD_RESET_PIN);
    Delay5us();
    GPIO_SetBits(LCD_RESET_PORT, LCD_RESET_PIN);

    GPIO_SetBits(GPIOD, GPIO_Pin_6);
    Delay5us();
}//end LCD_InitPins

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_SetBacklight(BOOL bOnState)
{
    if ((bOnState) && (!GetBacklightAvailable()))
    {
        bOnState = OFF;
    }

    GPIO_WriteBit(LCD_BACKLIGHT_PORT, LCD_BACKLIGHT_PIN, (bOnState == ON ? Bit_SET : Bit_RESET));
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void M_Turn_LCD_On_And_Reset_Timer(void)
{
    LCD_SetBacklight(ON);
    ResetLcdBacklightTimer();
}

/*!
********************************************************************************
*       @details
*******************************************************************************/
/*
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; Function:
;   ResetLcdBacklightTimer()
;
; Description:
;   Resets the LCD backlight LED dimming timer back to default timeout.
;
; Reentrancy:
;   No, but threadsafe
;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
void ResetLcdBacklightTimer(void)
{
    U_INT32 nOldPSW = ReadInterruptStatusAndDisable();
    m_tLcdBacklightTimer = ElapsedTimeLowRes(START_LOW_RES_TIMER);
    RestoreInterruptStatus(nOldPSW);
} // End ResetLcdBacklightTimer()

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_Init(void)
{
    m_nLcdCommandPort = 0x40;

    m_nLcdDataPort = 0x34;
    m_nLcdDataPort = 0x87;
    m_nLcdDataPort = 0x07;
    m_nLcdDataPort = 0x27;
    m_nLcdDataPort = 0x39;
    m_nLcdDataPort = 0xEF;
    m_nLcdDataPort = 0x28;
    m_nLcdDataPort = 0x00;

    m_nLcdCommandPort = 0x44;

    m_nLcdDataPort = 0x00;
    m_nLcdDataPort = 0x00;
    m_nLcdDataPort = 0xEF;
    m_nLcdDataPort = 0x80;
    m_nLcdDataPort = 0x25;
    m_nLcdDataPort = 0xEF;
    m_nLcdDataPort = 0x00;
    m_nLcdDataPort = 0x00;
    m_nLcdDataPort = 0x00;
    m_nLcdDataPort = 0x00;

    m_nLcdCommandPort = 0x5A;
    m_nLcdDataPort = 0x00;

    m_nLcdCommandPort = 0x5B;
    m_nLcdDataPort = 0x0C;

    m_nLcdCommandPort = 0x5D;
    m_nLcdDataPort = 0x04;
    m_nLcdDataPort = 0x86;

    m_nLcdCommandPort = 0x59;
    m_nLcdDataPort = 0x14;

    memset((void *) m_nPixelData, 0x00, sizeof(m_nPixelData));
    memset((void *) m_nPixelBackground, 0x00, sizeof(m_nPixelBackground));

    lcd_WritePixelDataBuffer();
    lcd_WritePixelBackgroundBuffer();
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_Update(void)
{
    KickWatchdog();
    if(m_bPaintLcdBackground)
    {
        lcd_WritePixelBackgroundBuffer();
        m_bPaintLcdBackground = FALSE;
    }
    KickWatchdog();
    if(m_bPaintLcdForeground)
    {
        lcd_WritePixelDataBuffer();
        m_bPaintLcdForeground = FALSE;
    }

    if (ElapsedTimeLowRes(m_tLcdBacklightTimer) >= (THIRTY_SECOND))
    {
        //Turn off LCD backlight.
        LCD_SetBacklight(OFF);
    }
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_ClearRow(U_INT16 nRowPosn, U_INT16 nColLoLimit, U_INT16 nColHiLimit, BOOL bPage)
{
    U_BYTE nLoBytePosn;
    U_BYTE nLoBitPosn;
    U_BYTE nLoBitMask;

    U_BYTE nHiBytePosn;
    U_BYTE nHiBitPosn;
    U_BYTE nHiBitMask;

    U_INT32 nIndex;
    U_BYTE *nWorkingRow;

    if(bPage)
    {
        nWorkingRow = &m_nPixelBackground[nRowPosn][0];
    }
    else
    {
        nWorkingRow = &m_nPixelData[nRowPosn][0];
    }

    nLoBytePosn = (U_BYTE)(nColLoLimit / BITS_IN_BYTE);
    nLoBitPosn = (U_BYTE)(BITS_IN_BYTE - (nColLoLimit % BITS_IN_BYTE));
    switch(nLoBitPosn)
    {
        case 0: nLoBitMask = 0xFF; break;
        case 1: nLoBitMask = 0xFE; break;
        case 2: nLoBitMask = 0xFC; break;
        case 3: nLoBitMask = 0xF8; break;
        case 4: nLoBitMask = 0xF0; break;
        case 5: nLoBitMask = 0xE0; break;
        case 6: nLoBitMask = 0xC0; break;
        case 7: nLoBitMask = 0x80; break;
        default:
            break;
    }

    nHiBytePosn = (U_BYTE)(nColHiLimit / BITS_IN_BYTE);
    nHiBitPosn = (U_BYTE)(nColHiLimit % BITS_IN_BYTE);
    switch(nHiBitPosn)
    {
        case 0: nHiBitMask = 0xFF; break;
        case 1: nHiBitMask = 0x7F; break;
        case 2: nHiBitMask = 0x3F; break;
        case 3: nHiBitMask = 0x1F; break;
        case 4: nHiBitMask = 0x0F; break;
        case 5: nHiBitMask = 0x07; break;
        case 6: nHiBitMask = 0x03; break;
        case 7: nHiBitMask = 0x01; break;
        default:
            break;
    }

    nIndex = nLoBytePosn;

    while(nIndex <= nHiBytePosn)
    {
        if(nIndex == nLoBytePosn)
        {
            nWorkingRow[nIndex] = nWorkingRow[nIndex] & nLoBitMask;
        }
        else if(nIndex == nHiBytePosn)
        {
            nWorkingRow[nIndex] = nWorkingRow[nIndex] & nHiBitMask;
        }
        else
        {
            nWorkingRow[nIndex] = 0x00;
        }

        nIndex++;
    }
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_InvertRow(U_INT16 nRowPosn, U_INT16 nColLoLimit, U_INT16 nColHiLimit, BOOL bPage)
{
    U_BYTE nLoBytePosn;
    U_BYTE nLoBitMask;
    U_BYTE nHiBytePosn;
    U_BYTE nHiBitMask;
    U_INT32 nIndex;
    U_BYTE *nWorkingRow;
    U_BYTE nWorkingByte;

    if(bPage)
    {
        nWorkingRow = &m_nPixelBackground[nRowPosn][0];
    }
    else
    {
        nWorkingRow = &m_nPixelData[nRowPosn][0];
    }

    nLoBytePosn = (U_BYTE) (nColLoLimit / BITS_IN_BYTE);
    switch(nColLoLimit % BITS_IN_BYTE)
    {
        case 0: nLoBitMask = 0xFF; break;
        case 1: nLoBitMask = 0x7F; break;
        case 2: nLoBitMask = 0x3F; break;
        case 3: nLoBitMask = 0x1F; break;
        case 4: nLoBitMask = 0x0F; break;
        case 5: nLoBitMask = 0x07; break;
        case 6: nLoBitMask = 0x03; break;
        case 7: nLoBitMask = 0x01; break;
        default:
            break;
    }

    nHiBytePosn = (U_BYTE) (nColHiLimit / BITS_IN_BYTE);
    switch(nColHiLimit % BITS_IN_BYTE)
    {
        case 0: nHiBitMask = 0x00; break;
        case 1: nHiBitMask = 0x80; break;
        case 2: nHiBitMask = 0xC0; break;
        case 3: nHiBitMask = 0xE0; break;
        case 4: nHiBitMask = 0xF0; break;
        case 5: nHiBitMask = 0xF8; break;
        case 6: nHiBitMask = 0xFC; break;
        case 7: nHiBitMask = 0xFE; break;
        default:
            break;
    }

    for(nIndex = nLoBytePosn; nIndex <= nHiBytePosn; nIndex++)
    {
        if(nIndex == nLoBytePosn)
        {
            nWorkingByte = ((~nWorkingRow[nIndex]) & nLoBitMask);
            nWorkingRow[nIndex] = ((nWorkingRow[nIndex] & ~nLoBitMask) | nWorkingByte);
        }
        else if(nIndex == nHiBytePosn)
        {
            nWorkingByte = ((~nWorkingRow[nIndex]) & nHiBitMask);
            nWorkingRow[nIndex] = ((nWorkingRow[nIndex] & ~nHiBitMask) | nWorkingByte);
        }
        else
        {
            nWorkingRow[nIndex] = ~nWorkingRow[nIndex];
        }
    }
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_ClearPixel(U_INT16 nColPosn, U_BYTE nRowPosn, BOOL bPage)
{
    U_BYTE nTestByte;
    U_BYTE nBytePosn;
    U_BYTE nBitPosn;

    nBytePosn = (U_BYTE)(nColPosn / 8);
    nBitPosn = (U_BYTE)(nColPosn % 8);

    switch(nBitPosn)
    {
        case 0: nBitPosn = 0x80; break;
        case 1: nBitPosn = 0x40; break;
        case 2: nBitPosn = 0x20; break;
        case 3: nBitPosn = 0x10; break;
        case 4: nBitPosn = 0x08; break;
        case 5: nBitPosn = 0x04; break;
        case 6: nBitPosn = 0x02; break;
        case 7: nBitPosn = 0x01; break;
        default:
            break;
    }

    if(bPage)
    {
        nTestByte = m_nPixelBackground[nRowPosn][nBytePosn];
    }
    else
    {
        nTestByte = m_nPixelData[nRowPosn][nBytePosn];
    }

    nTestByte &= ~nBitPosn;

    if(bPage)
    {
        m_nPixelBackground[nRowPosn][nBytePosn] = nTestByte;
    }
    else
    {
        m_nPixelData[nRowPosn][nBytePosn] = nTestByte;
    }
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

void LCD_InvertPixel(U_INT16 nColPosn, U_BYTE nRowPosn, BOOL bPage)
{
    U_BYTE nTestByte;
    U_BYTE nBytePosn;
    U_BYTE nBitPosn;

    nBytePosn = (U_BYTE)(nColPosn / 8);
    nBitPosn = (U_BYTE)(nColPosn % 8);

    switch(nBitPosn)
    {
        case 0: nBitPosn = 0x80; break;
        case 1: nBitPosn = 0x40; break;
        case 2: nBitPosn = 0x20; break;
        case 3: nBitPosn = 0x10; break;
        case 4: nBitPosn = 0x08; break;
        case 5: nBitPosn = 0x04; break;
        case 6: nBitPosn = 0x02; break;
        case 7: nBitPosn = 0x01; break;
        default:
            break;
    }

    if(bPage)
    {
        nTestByte = m_nPixelBackground[nRowPosn][nBytePosn];
    }
    else
    {
        nTestByte = m_nPixelData[nRowPosn][nBytePosn];
    }

    if(nTestByte & nBitPosn)
    {
        nTestByte &= ~nBitPosn;
    }
    else
    {
        nTestByte |= nBitPosn;
    }

    if(bPage)
    {
        m_nPixelBackground[nRowPosn][nBytePosn] = nTestByte;
    }
    else
    {
        m_nPixelData[nRowPosn][nBytePosn] = nTestByte;
    }
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

static void lcd_WritePixelDataBuffer(void)
{
    U_INT32 nOldPSW;
    U_BYTE nCmdData[] = {0x00, 0x00};

    nOldPSW = ReadPriorityStatusAndChange(BOOST_THREAD_PRIORITY);

    lcd_Write(0x46, nCmdData, sizeof(nCmdData));
    lcd_Write(0x42, &m_nPixelData[0][0], sizeof(m_nPixelData));

    RestorePriorityStatus(nOldPSW);
}//end lcd_WritePixelDataBuffer

/*!
********************************************************************************
*       @details
*******************************************************************************/

static void lcd_WritePixelBackgroundBuffer(void)
{
    U_INT32 nOldPSW;
    U_BYTE nCmdData[] = {0x80, 0x25};

    nOldPSW = ReadPriorityStatusAndChange(BOOST_THREAD_PRIORITY);

    lcd_Write(0x46, nCmdData, sizeof(nCmdData));
    lcd_Write(0x42, &m_nPixelBackground[0][0], sizeof(m_nPixelBackground));

    RestorePriorityStatus(nOldPSW);
}//end lcd_WritePixelBackgroundBuffer

/*!
********************************************************************************
*       @details
*******************************************************************************/

static void lcd_Write(U_BYTE nCmd, U_BYTE *pData, U_INT32 nLength)
{
    U_INT32 nIndex = 0;

    m_nLcdCommandPort = nCmd;

    while(nIndex < nLength)
    {
        m_nLcdDataPort = pData[nIndex++];
    }

}//end lcd_Write

/*!
********************************************************************************
*       @details
*******************************************************************************/

U_BYTE* GetLcdBackgroundPage(void)
{
    return &m_nPixelBackground[0][0];
}

/*!
********************************************************************************
*       @details
*******************************************************************************/

U_BYTE* GetLcdForegroundPage(void)
{
    return &m_nPixelData[0][0];
}

void LCD_Refresh(BOOL bPage)
{
    if(bPage)
    {
        m_bPaintLcdBackground = TRUE;
    }
    else
    {
        m_bPaintLcdForeground = TRUE;
    }
}
